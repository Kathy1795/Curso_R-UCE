ifelse(x > 0,"positivo","negativo")
### for
x <- c(12, 22, 28, 41)
for (i in 1:4)
for (i in 1:4) {
print(i)
}
# Ejemplo 2
x <- c(12, 22, 28, 41)
for (i in x){
print(i+1)
}
print(i+5)
# Ejemplo 2
x <- c(12, 22, 28, 41)
for (i in x){
print(i+5)
}
cat('\n', i, 'a˜os dec’)
i <- i + 1
}
}
print("a")
### repeat
i <- 1
repeat {
if (i > 15) break
else{
print("a")
i <- i + 1
}
}
print(i, "años de edad")
i <- i + 1
### repeat
i <- 1
repeat {
if (i > 15) break
else{
print(i, "años de edad")
i <- i + 1
}
}
cat(i, "años de edad")
repeat {
if (i > 15) break
else{
cat(i, "años de edad")
i <- i + 1
}
}
repeat {
if (i > 15) break
else{
cat('\n',i, "años de edad")
i <- i + 1
}
}
### repeat
i <- 1
repeat {
if (i > 15) break
else{
cat('\n', i, "años de edad")
i <- i + 1
}
}
### repeat
i <- 1
repeat {
if (i > 5) break
else{
cat('\n', i, "años de edad")
i <- i + 1
}
}
i <- 1
while (i<5) {
i <- i+10
print(i)
}
i <- 1
while (i<5) {
print(i)
i <- i+10
}
i <- i+1
i <- 0
while (i<16) {
print(i)
i <- i+1
}
i <- 1
while (i<4) {
print(i)
i <- i+1
}
i <- 1
while (i<5) {
i <- i+1
print(i)
}
i <- 1
while (i<5) {
i <- i+10
print(i)
}
i <- i+2
i <- 1
while (i<5) {
i <- i+2
print(i)
}
install.packages("installr")
# Informacion paquetes basicos
search()
# Instalacion desde el repositorio CRAN
install.packages('tidyverse')
# Instalacion multiples paquetes
packages <- c("ggplot2","lubridate","readr")
install.packages(packages, dependencies=TRUE)
# Cargar las librerias
library(ggplot2)
# Conocer que paquetes están cargados
(.packages())
5+5
a <- 5
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#----- Vectores
a <- 250
typeof(a)
# Longitud (Número de elementos)
length(a)
# Para probar que una estructura de datos es un vector (atómico o lista)
# se utiliza la función:
is.vector(a)
#----- Vectores atómicos
dbl_var <- c(1, 2, -1)
int_var <- c(3L, 7L, 1L) # con el sufijo L se declaran números enteros
int_var <- c(3L, 7L, 1L) # con el sufijo L se declaran números enteros
log_var <- c(FALSE, TRUE, F, T) # TRUE y FALSE (T, F) se usan para crear
chr_var <- c("Source", "Stat", "Lab")
is.logical(chr_var)
x <- list(1:3, c("Source", "Stat", "Lab"), c(TRUE, FALSE), c(1.3, 4.5))
str(x)
# probamos si x es una lista
is.list(x)
# pasamos a vector considerando las reglas de coerción
unlist(x)
x <- list(list(list("Source", "Stat")))
str(x)
# son equivalentes. un vector no puede contener otro vector
c(1, c(2, c(3,4)))  ;  c(1, 2, 3, 4)
x <- list(1:3, c("Source", "Stat", "Lab"), nomb_obj=c(TRUE, FALSE), c(1.3, 4.5))
x <- list(list(list("Source", "Stat")))
View(x)
x <- list(1:3, c("Source", "Stat", "Lab"), nomb_obj=c(TRUE, FALSE), c(1.3, 4.5))
x[4]
x[2]
x[[4]]
x$nomb_obj
mtx <- matrix (1:12,nrow=3, ncol=4, byrow=FALSE)
mtx
mtx <- matrix (1:12,nrow=3, ncol=4, byrow=TRUE)
mtx
# Elementos de una matriz
# Columnas 2 y 4
mtx <- matrix (1:12, nrow=3, ncol=4, byrow=FALSE)
mtx
mtx[,c(2,4)]
# Filas 2 y 3
mtx[c(2,3),]
mtx[1,3]
#----- Array
array(1:12,c(2,3,2))
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
x
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"),
c("Sur","Norte"))
x
# Elementos de un arrays
x[,,"Sur"]
x["hombres",,]
dbl_vec <- c(1, 2, 3)
chr_vec <- c("R", "S", "T")
log_vec <- c(TRUE, FALSE, TRUE)
# Cremos el dataframe
df <- data.frame(dbl_vec, chr_vec, log_vec)
View(df)
View(df)
df
# Elementos de un dataframe
nomb <- c("John", "Paul", "George", "Ringo")
nac <- c(1940, 1941, 1943, 1940)
instr <- c("guitar", "bass", "guitar", "drums")
df <- data.frame(nomb, nac, instr)
View(df)
df[2, c(2,3)] #Mediante df[i, j] se obtiene la componente i, j del data frame.
df[2, 2] # componente 2, 2
df[3, 1] # componente 3, 1
df[3, ] # fila 3
df[ , 3]=="guitar" # columna 3 de df igual a "guitar"
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("~/Downloads")
setwd("~/")
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("~/Downloads")
setwd("C:/Users/Aguirre/Downloads")
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("C:/Users/Aguirre/Downloads")
# 2. Descargar el repositorio
download.file(url = "https://github.com/taller-R/clase_3/archive/master.zip",
destfile = "clase_3.zip")
# 3. Descomprimir las carpeta
unzip(zipfile = "clase_3.zip")
# 4. Cambiar nuevamente el directorio de trabajo
setwd("C:/Users/Aguirre/Downloads/clase_3-master")
# 5. Inspeccionar archivos en el directorio
list.files()
packages <- c('tidyverse','readxl','haven')
install.packages(packages)
(.packages())
library(packages)
packages <- c('tidyverse','readxl','haven','easypackages')
library(easypackages)
libraries(packages)
(.packages())
getwd()
list.files("Datasets/")
#### 1.2.1 Importar bases de datos en formato .csv
?read.csv2
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv")
View(personas)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",", header = T, stringsAsFactors = F
)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",", header = T, stringsAsFactors = F)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",", header = T, stringsAsFactors = F)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",sep = ",")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T)
View(personas)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T,sep = ",")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T,quote = T)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_personas_2020_09.csv",header = T,quote = ",")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv")
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv")
View(personas)
setwd("C:/Users/Aguirre/Downloads/clase_3-master")
setwd("C:/Users/Aguirre/Downloads/clase_3-master") # Cambiar este directorio
getwd()
data_csv <- read.csv2(file = 'datos/original/censo 2018.csv' ,sep = ",", header = T, stringsAsFactors = F)
data_csv <- read.csv2(file = 'datos/original/censo 2018.csv' ,sep = ",", header = T, stringsAsFactors = F)
View(data_csv)
data_dta <- read_dta(file = 'datos/original/Area - Caracteristicas generales (Personas).dta')
View(data_dta)
str(personas)
personas <- read.csv2(file = "Datasets/enemdu_2020_09/enemdu_vivienda_hogar_2020_09.csv")
str(personas)
# 1. Establecer el directorio de trabajo en el que quieres descargar la carpeta
setwd("C:/Users/Aguirre/Downloads")
# 2. Descargar el repositorio
download.file(url = "https://github.com/taller-R/clase_4/archive/master.zip",
destfile = "clase_4.zip")
# 3. Descomprimir las carpeta
unzip(zipfile = "clase_4.zip")
# 4. Cambiar nuevamente el directorio de trabajo
setwd("C:/Users/Aguirre/Downloadsclase_4-master")
# 4. Cambiar nuevamente el directorio de trabajo
setwd("C:/Users/Aguirre/Downloads/clase_4-master")
getwd()
packages <- c('tidyverse','readxl','haven','easypackages','strings')
install.packages(packages)
library(easypackages) #easypackages me permite cargar varios paquetes a la vez
libraries(packages)
data_asa <- read_csv("Datasets/ASA_pasajeros.csv")
attach(data_asa)
nchar(`Codigo IATA`) # numero de caracteres que tiene cada elemento de la variables
substr(x = `Codigo IATA`,start = 1,stop = 2) # extrae los dos primeros caracteres de la variables
grep(pattern = 'la' , x = c('Hola','Lola','Nada','Todo'),value = T)
grep(pattern = "Ciudad",Descripcion ,value = T) %>%  unique()
unique(grep(pattern = "Ciudad",Descripcion ,value = T) )
View(data_asa)
nombres = grep(pattern = 'municipio' , x = colnames(data_asa))
nombres = grep(pattern = "Estado" , x = colnames(data_asa))
nombres
paste("El valor x es: ", 2.65)
paste("Curso", "R", "UCE", sep = "-")
paste("Curso", "R", "UCE", sep = "")
paste("Curso", "R", "UCE", sep = "/")
paste("Curso", "R", "UCE", sep = "-")
bbd_dta <- read_dta("Datasets/datos/original/Area - Caracteristicas generales (Personas).dta")
View(bbd_dta)
data_dta <- read_dta("Datasets/datos/original/Area - Caracteristicas generales (Personas).dta")
is.numeric(data_dta$fex_c_2011)
data_dta %>% group_by(P6020) %>% summarise(total = sum(fex_c_2011))
data_dta %>% group_by(P6020)
View(bbd_dta)
View(data_asa)
View(data_asa)
View(data_asa)
View(bbd_dta)
sexo_area = data_dta %>% group_by(P6020,area) %>% summarise(total = sum(fex_c_2011))
data_dta %>% group_by(P6020) %>% summarise(total = sum(fex_c_2011))
sexo_area = data_dta %>% group_by(P6020,area) %>% summarise(total = sum(fex_c_2011))
View(sexo_area)
data_dta %>% group_by(P6020) %>% summarise(education = weighted.mean(ESC, fex_c_2011)
data_dta %>% group_by(P6020) %>% summarise(education = weighted.mean(ESC, fex_c_2011) ,  age = weighted.mean(P6040, fex_c_2011))
data_dta %>% group_by(P6020) %>% summarise(education = weighted.mean(ESC, fex_c_2011) ,  age = weighted.mean(P6040, fex_c_2011))
View(data_dta)
#### 1.1 Cargar bases de datos
browseURL(url = "http://microdatos.dane.gov.co/index.php/catalog/659/get_microdata", browser = getOption("browser")) # Fuente: DANE
#### 0.0 Hoy veremos...
rstudioapi::viewer(url = "Intro-clase-4.html")
df1 <- c(1, 2, 3)
df2 <- c(4, 5, 6)
resultado <- rbind(df1,df2)
resultado
df_1 <- data.frame(A= 1:3, B= letters[1:3])
df_1
df_1 <- data.frame(a= 1:4, b= letters[1:4])
df1 <- data.frame(A= 1:3, B= letters[1:3])
df2 <- data.frame(a= 1:4, b= letters[1:4])
resultado <- rbind(df1,df2)
df2 <- data.frame(a= 1:4, b= letters[1:4])
resultado <- rbind(df1,df2)
resultado
df1 <- data.frame(A= 1:3, B= letters[1:3])
df2 <- data.frame(a= 1:4, b= letters[1:4])
resultado <- rbind(df1,df2)
df2 <- data.frame(A= 1:4, B= letters[1:4])
resultado <- rbind(df1,df2)
resultado
resultado <- cbind(df1,df2)
df2 <- data.frame(X= 1:4, Y= letters[1:4])
resultado <- cbind(df1,df2)
resultado
df1 <- data.frame(A= 1:3, B= letters[1:3])
df2 <- data.frame(X= 1:4, Y= letters[1:4])
resultado <- cbind(df1,df2)
df1 <- data.frame(A= 1:3, B= letters[1:3])
df2 <- data.frame(X= 1:3, Y= letters[1:3])
resultado <- cbind(df1,df2)
resultado
df2 <- data.frame(X= 1:4, Y= letters[1:3])
resultado <- cbind(df1,df2)
df2 <- data.frame(X= 1:4, Y= letters[1:3])
df2 <- data.frame(X= 1:4, Y= letters[1:4])
resultado <- cbind(df1,df2)
df2 <- data.frame(X= 1:3, Y= letters[1:3])
resultado <- cbind(df1,df2)
resultado
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
bdd_shop <- read_excel("Datasets/data_bikes/bikeshops.xlsx")
View(bdd_bikes)
View(bdd_shop)
bdd_orders <- read_excel("Datasets/data_bikes/orderlines.xlsx")
View(bdd_orders)
bdd_1 <- data.frame(id=(1:30),costo=(500:530))
bdd_1 <- data.frame(id=(1:30),costo=(20:30))
bdd_1 <- data.frame(id=(1:10),costo=(20:30,1))
bdd_1 <- data.frame(id=(1:10),costo=seq(20,30,1))
bdd_1 <- data.frame(id=(1:10),costo=seq(20,30,2))
bdd_1 <- data.frame(id=(1:10),costo=seq(20,40,2))
id=(1:10)
costo=seq(20,40,2)
bdd_1 <- data.frame(id=(1:10),costo=seq(20,40,2))
bdd_1 <- data.frame(id=(1:10),costo=seq(20,41,2))
bdd_1 <- data.frame(id=(1:10),costo=seq(21,49,2))
bdd_1 <- data.frame(id=(1:10),costo=seq(20,49,2))
bdd_1 <- data.frame(id=(1:10),costo=seq(100:109))
bdd_1 <- data.frame(id=(1:10),costo=seq(100:109))
bdd_1 <- data.frame(id=(2:8),costo=seq(100:107))
bdd_1 <- data.frame(id=(2:8),costo=seq(100:106))
bdd_1 <- data.frame(id=(1:10),costo=seq(100:109))
bdd_2 <- data.frame(id=(2:8),costo=seq(100:106))
View(bdd_1)
View(bdd_2)
bdd_2 <- data.frame(id=(2:8),costo=letter(1:7))
bdd_2 <- data.frame(id=(2:8),costo=letter(1:6))
bdd_2 <- data.frame(id=(2:8),costo=letter(1:7))
bdd_2 <- data.frame(id=(2:8),costo=letter[1:7])
bdd_2 <- data.frame(id=(2:8),costo=letters[1:7])
View(bdd_2)
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id")
bdd_inner
bdd_2 <- data.frame(id=(2:8),producto=letters[1:7])
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id")
bdd_inner
bdd_inner <- bdd_1 %>% inner_join(bdd_2,by = "id")
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all = TRUE) # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% full_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all.x = TRUE) # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% left_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_1 <- data.frame(id=(1:10),costo=seq(100:109))
bdd_2 <- data.frame(id=(2:8),producto=letters[1:7])
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id") # usando funcion merge
bdd_inner
bdd_1 <- data.frame(id=(1:10),costo=seq(100,109))
bdd_2 <- data.frame(id=(2:8),producto=letters[1:7])
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id") # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% inner_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all = TRUE) # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% full_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id") # usando funcion merge
bdd_inner
bdd_1 <- data.frame(id=(1:10),costo=seq(100,109))
bdd_2 <- data.frame(id=seq(2,10,2),producto=letters[1:7])
bdd_1 <- data.frame(id=(1:10),costo=seq(100,109))
bdd_2 <- data.frame(id=seq(2,10,2),producto=letters[1:7])
bdd_2 <- data.frame(id=seq(2,10,2),producto=letters[1:5])
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id") # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% inner_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all = TRUE) # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% full_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all.x = TRUE) # usando funcion merge
bdd_inner
bdd_1 <- data.frame(id=(1:5),costo=seq(100,105))
bdd_1 <- data.frame(id=(1:5),costo=seq(100,104))
bdd_2 <- data.frame(id=seq(2,10,2),producto=letters[1:5])
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id") # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% inner_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all = TRUE) # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% full_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all.x = TRUE) # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% left_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all.x = TRUE) # usando funcion merge
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all.y = TRUE) # usando funcion merge
bdd_inner
bdd_inner <- bdd_1 %>% right_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
bdd_shop <- read_excel("Datasets/data_bikes/bikeshops.xlsx")
bdd_orders <- read_excel("Datasets/data_bikes/orderlines.xlsx")
# Definir semilla para reproducibilidad
set.seed(5)
# Definir semilla para reproducibilidad
set.seed(1235)
df_base <- data.frame(Alumno = LETTERS[1:6], Matematicas = sample(x = 1:10, size = 6, replace = TRUE),
Lenguaje = sample(x = 1:10, size = 6, replace = TRUE))
df_base
df_modificatorio <- data.frame(Alumno = c("E", "C"), Matematicas = c(99, 88))
df_modificatorio
df_base$no %in% df_modificatorio$Alumno #pregunto de la data base se encuentra contenido por la modificada
df_base$lumno %in% df_modificatorio$Alumno #pregunto de la data base se encuentra contenido por la modificad
df_base$Alumno %in% df_modificatorio$Alumno #pregunto de la data base se encuentra contenido por la modificad
# Con la funcion match
# match
match(x= df_base$Alum, table= df_modificatorio$Alum, nomatch= 0)
# Con la funcion match
# match
match(x= df_base$Alum, table= df_modificatorio$Alum)
# Con la funcion match
# match
match(x= df_base$Alumno, table= df_modificatorio$Alumno,nomatch = 0)
View(df_modificatorio)
df_base[df_base$Alumno %in% df_modificatorio$Alumno, ]
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
bdd_shop <- read_excel("Datasets/data_bikes/bikeshops.xlsx")
bdd_orders <- read_excel("Datasets/data_bikes/orderlines.xlsx")
glimpse(bdd_bikes)
View(bdd_bikes)
View(bdd_orders)
left_join(bdd_orders, bdd_bikes,by.x = "product.id",by.y = "bike.id")
left_join(bdd_orders, bdd_bikes,by = c("product.id" = "bike.id"))
a <- left_join(bdd_orders, bdd_bikes,by = c("product.id" = "bike.id"))
a
View(a)
View(bdd_shop)
View(bdd_orders)
bike_final <- bdd_orders %>%
left_join(bdd_bikes,by = c("product.id" = "bike.id")) %>%
left_join(bdd_shop,by = c("customer.id" = "bikeshop.id")) %>%
bike_final %>%  glimpse()
bike_final <- bdd_orders %>%
left_join(bdd_bikes,by = c("product.id" = "bike.id")) %>%
left_join(bdd_shop,by = c("customer.id" = "bikeshop.id"))
bike_final %>%  glimpse()
View(bike_final)
fs::dir_create("00_data/bike_sales/data_wrangled_student")
### 3.3.1. Excel
bike_final %>%
write_xlsx("Datasets/data_bikes/bike_final.xlsx")
packages <- c('tidyverse','readxl','haven','easypackages','strings','writexl')
library(easypackages) #easypackages me permite cargar varios paquetes a la vez
libraries(packages)
### 3.3.1. Excel
bike_final %>%
write_xlsx("Datasets/data_bikes/bike_final.xlsx")
### 3.3.2. CSV
bike_final %>%
write_xlsx("Datasets/data_bikes/bike_final.csv")
